import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from datetime import datetime
import logging
import asyncio
import csv
import io
import os
import shutil
from database import init_db
from aiogram.utils.exceptions import MessageNotModified

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

logging.basicConfig(level=logging.INFO)

API_TOKEN = '6554402261:AAEHESW-p7hvM-MXbwnyL1WhVnUBwEmjFpQ'
ADMIN_IDS = [231916981]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class ClientStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_day = State()
    waiting_for_payment_status = State()
    waiting_for_import = State()
    waiting_for_telegram_username = State()
    waiting_for_test_notification = State()
    waiting_for_client_selection = State()

def get_db_connection():
    return sqlite3.connect('vpn_bot.db')

def create_client_keyboard(clients, action="status", row_width=2):
    keyboard = types.InlineKeyboardMarkup(row_width=row_width)
    buttons = []
    for client in clients:
        name, status = client
        status_emoji = "‚úÖ" if status == "paid" else "‚ùå"
        buttons.append(
            types.InlineKeyboardButton(
                f"{status_emoji} {name}",
                callback_data=f"{action}_{name}"
            )
        )
    keyboard.add(*buttons)
    return keyboard

def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        ["–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"],
        ["–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"],
        ["–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"],
        ["–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram"],
        ["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"]
    ]
    for row in buttons:
        keyboard.add(*row)
    return keyboard

async def return_to_main_menu(message_or_callback):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "VPN Payment Bot - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.reply(text, reply_markup=create_main_keyboard())
    else:
        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è callback
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="list_all"),
            types.InlineKeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notifications_menu"),
            types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", callback_data="check_database")
        )
        
        await bot.edit_message_text(
            chat_id=message_or_callback.message.chat.id,
            message_id=message_or_callback.message.message_id,
            text=text,
            reply_markup=keyboard
        )

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await return_to_main_menu(message)

@dp.message_handler(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
async def list_clients(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton("–í—Å–µ", callback_data="list_all"),
        types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="list_paid"),
        types.InlineKeyboardButton("–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="list_unpaid"),
        types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    conn.close()

@dp.callback_query_handler(lambda c: c.data.startswith('list_'))
async def process_list_callback(callback_query: types.CallbackQuery):
    list_type = callback_query.data[5:]
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    if list_type == 'all':
        cursor.execute("SELECT name, payment_day, status, telegram_username FROM clients")
    else:
        cursor.execute("SELECT name, payment_day, status, telegram_username FROM clients WHERE status = ?", 
                      ('paid' if list_type == 'paid' else 'unpaid',))
    
    clients = cursor.fetchall()
    conn.close()
    
    if not clients:
        await bot.answer_callback_query(callback_query.id, "–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for name, day, status, telegram in clients:
        status_emoji = "‚úÖ" if status == "paid" else "‚ùå"
        keyboard.add(types.InlineKeyboardButton(
            f"{status_emoji} {name}",
            callback_data=f"client_info_{name}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–∑—É
    keyboard.add(
        types.InlineKeyboardButton("–í—Å–µ", callback_data="list_all"),
        types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="list_paid"),
        types.InlineKeyboardButton("–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="list_unpaid")
    )
    
    response = f"üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({'–≤—Å–µ' if list_type == 'all' else '–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ' if list_type == 'paid' else '–Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ'}):\n\n"
    response += "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=response,
            reply_markup=keyboard
        )
    except MessageNotModified:
        await bot.answer_callback_query(callback_query.id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('client_info_'))
async def process_client_info(callback_query: types.CallbackQuery):
    client_name = callback_query.data[12:]
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT name, payment_day, status, telegram_username, last_notified, created_at 
        FROM clients WHERE name = ?
    """, (client_name,))
    client = cursor.fetchone()
    conn.close()
    
    if not client:
        await bot.answer_callback_query(callback_query.id, "–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    name, day, status, telegram, last_notified, created_at = client
    status_emoji = "‚úÖ" if status == "paid" else "‚ùå"
    status_text = "–û–ø–ª–∞—á–µ–Ω–æ" if status == "paid" else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
    
    response = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n\n"
    response += f"–ò–º—è: {name}\n"
    response += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
    response += f"–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã: {day}\n"
    if telegram:
        response += f"Telegram: @{telegram}\n"
    if last_notified:
        response += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {last_notified}\n"
    response += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {created_at}\n"
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{name}"),
        types.InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Telegram", callback_data=f"set_telegram_{name}"),
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data=f"test_notify_{name}"),
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_all")
    )
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response,
        reply_markup=keyboard
    )

@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def change_status_start(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name, status FROM clients")
    clients = cursor.fetchall()
    conn.close()
    
    if not clients:
        await message.reply("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ")
        return
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
        reply_markup=create_client_keyboard(clients, "change_status")
    )

@dp.callback_query_handler(lambda c: c.data.startswith('change_status_'))
async def process_change_status(callback_query: types.CallbackQuery):
    client_name = callback_query.data[14:]
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT status FROM clients WHERE name = ?", (client_name,))
    result = cursor.fetchone()
    
    if result:
        new_status = 'paid' if result[0] == 'unpaid' else 'unpaid'
        cursor.execute("UPDATE clients SET status = ? WHERE name = ?", (new_status, client_name))
        conn.commit()
        
        status_emoji = "‚úÖ" if new_status == "paid" else "‚ùå"
        await bot.answer_callback_query(
            callback_query.id,
            f"–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ {client_name} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_emoji}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
        cursor.execute("SELECT name, status FROM clients")
        clients = cursor.fetchall()
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=create_client_keyboard(clients, "change_status")
        )
    
    conn.close()

@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def delete_client_start(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name, status FROM clients")
    clients = cursor.fetchall()
    conn.close()
    
    if not clients:
        await message.reply("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ")
        return
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=create_client_keyboard(clients, "delete")
    )

@dp.callback_query_handler(lambda c: c.data.startswith('delete_'))
async def process_delete_client(callback_query: types.CallbackQuery):
    client_name = callback_query.data[7:]
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM clients WHERE name = ?", (client_name,))
    conn.commit()
    
    await bot.answer_callback_query(
        callback_query.id,
        f"–ö–ª–∏–µ–Ω—Ç {client_name} —É–¥–∞–ª–µ–Ω"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute("SELECT name, status FROM clients")
    clients = cursor.fetchall()
    if clients:
        await bot.edit_message_reply_markup(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=create_client_keyboard(clients, "delete")
        )
    else:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ"
        )
    
    conn.close()

@dp.message_handler(lambda message: message.text == "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ")
async def test_notification(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
    cursor.execute("""
        SELECT name, status, telegram_username, payment_day 
        FROM clients 
        ORDER BY name
    """)
    clients = cursor.fetchall()
    conn.close()
    
    if not clients:
        await message.reply("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for name, status, telegram, day in clients:
        status_emoji = "‚úÖ" if status == "paid" else "‚ùå"
        telegram_info = f" (@{telegram})" if telegram else " (Telegram –Ω–µ —É–∫–∞–∑–∞–Ω)"
        keyboard.add(types.InlineKeyboardButton(
            f"{status_emoji} {name} - {day} —á–∏—Å–ª–æ{telegram_info}",
            callback_data=f"test_notify_{name}"
        ))
    
    keyboard.add(types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n"
        "‚úÖ - –æ–ø–ª–∞—á–µ–Ω–æ\n"
        "‚ùå - –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('test_notify_'))
async def process_test_notification(callback_query: types.CallbackQuery):
    client_name = callback_query.data[12:]
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT name, status, telegram_username, payment_day, last_notified, chat_id 
        FROM clients 
        WHERE name = ?
    """, (client_name,))
    client = cursor.fetchone()
    conn.close()
    
    if not client:
        await bot.answer_callback_query(
            callback_query.id,
            f"–ö–ª–∏–µ–Ω—Ç {client_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return
    
    name, status, telegram, day, last_notified, chat_id = client
    status_emoji = "‚úÖ" if status == "paid" else "‚ùå"
    status_text = "–û–ø–ª–∞—á–µ–Ω–æ" if status == "paid" else "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
    
    if not telegram and not chat_id:
        await bot.answer_callback_query(
            callback_query.id,
            f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {name} –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username –∏–ª–∏ chat_id"
        )
        return
    
    try:
        notification_text = (
            f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ\n\n"
            f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {name},\n"
            f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ.\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
            f"–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã: {day} —á–∏—Å–ª–æ"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            callback_query.from_user.id,
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {name} (@{telegram})"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        try:
            if chat_id:
                await bot.send_message(chat_id=chat_id, text=notification_text)
            elif telegram:
                # –ï—Å–ª–∏ –Ω–µ—Ç chat_id, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
                user = await bot.get_chat(f"@{telegram}")
                if user and user.id:
                    await bot.send_message(chat_id=user.id, text=notification_text)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    conn = get_db_connection()
                    cursor = conn.cursor()
                    cursor.execute(
                        "UPDATE clients SET chat_id = ? WHERE name = ?",
                        (user.id, name)
                    )
                    conn.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {str(e)}")
            raise
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "UPDATE clients SET last_notified = ? WHERE name = ?",
            (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), name)
        )
        conn.commit()
        conn.close()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        response = f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:\n\n"
        response += f"–ò–º—è: {name}\n"
        response += f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
        response += f"–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã: {day}\n"
        response += f"Telegram: @{telegram}\n"
        if last_notified:
            response += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {last_notified}\n"
        response += f"–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data=f"test_notify_{name}")
        )
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=response,
            reply_markup=keyboard
        )
        
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await bot.answer_callback_query(
            callback_query.id,
            error_message
        )

@dp.message_handler(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram")
async def manage_telegram(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT name, telegram_username FROM clients")
    clients = cursor.fetchall()
    conn.close()
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    for name, telegram in clients:
        telegram_info = f" (@{telegram})" if telegram else " (–Ω–µ —É–∫–∞–∑–∞–Ω)"
        keyboard.add(types.InlineKeyboardButton(
            f"{name}{telegram_info}",
            callback_data=f"set_telegram_{name}"
        ))
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram username:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def add_client_start(message: types.Message):
    await ClientStates.waiting_for_name.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=ClientStates.waiting_for_name)
async def process_client_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text.strip()
    
    await ClientStates.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã (1-31):")

@dp.message_handler(state=ClientStates.waiting_for_day)
async def process_client_day(message: types.Message, state: FSMContext):
    try:
        day = int(message.text)
        if day < 1 or day > 31:
            raise ValueError
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:")
        return
    
    async with state.proxy() as data:
        data['day'] = day
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û–ø–ª–∞—á–µ–Ω–æ", "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"]
    keyboard.add(*buttons)
    
    await ClientStates.next()
    await message.reply("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.message_handler(state=ClientStates.waiting_for_payment_status)
async def process_payment_status(message: types.Message, state: FSMContext):
    status = message.text.lower()
    if status not in ["–æ–ø–ª–∞—á–µ–Ω–æ", "–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ"]:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–û–ø–ª–∞—á–µ–Ω–æ' –∏–ª–∏ '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ':")
        return
    
    async with state.proxy() as data:
        conn = get_db_connection()
        try:
            conn.execute(
                "INSERT INTO clients (name, payment_day, status) VALUES (?, ?, ?)",
                (data['name'], data['day'], 'paid' if status == '–æ–ø–ª–∞—á–µ–Ω–æ' else 'unpaid')
            )
            conn.commit()
            await message.reply(
                f"–ö–ª–∏–µ–Ω—Ç {data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã: {data['day']}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–û–ø–ª–∞—á–µ–Ω–æ' if status == '–æ–ø–ª–∞—á–µ–Ω–æ' else '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}",
                reply_markup=create_main_keyboard()
            )
        except sqlite3.IntegrityError:
            await message.reply("–ö–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        finally:
            conn.close()
    
    await state.finish()

# –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(lambda message: message.text == "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def import_data_start(message: types.Message):
    await ClientStates.waiting_for_import.set()
    await message.reply(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ò–º—è,–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã,–°—Ç–∞—Ç—É—Å\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,5,paid\n"
        "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤,10,unpaid\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª .csv —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–æ–ª–æ–Ω–∫–∞–º–∏.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message_handler(state=ClientStates.waiting_for_import, content_types=types.ContentType.TEXT)
async def process_text_import(message: types.Message, state: FSMContext):
    lines = message.text.split('\n')
    imported = 0
    errors = 0
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    for line in lines:
        try:
            name, day, status = map(str.strip, line.split(','))
            day = int(day)
            if status not in ('paid', 'unpaid'):
                raise ValueError
            
            cursor.execute(
                "INSERT OR IGNORE INTO clients (name, payment_day, status) VALUES (?, ?, ?)",
                (name, day, status)
            )
            imported += 1
        except Exception as e:
            errors += 1
            continue
    
    conn.commit()
    conn.close()
    
    await state.finish()
    await message.reply(
        f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\n–£—Å–ø–µ—à–Ω–æ: {imported}\n–û—à–∏–±–æ–∫: {errors}",
        reply_markup=create_main_keyboard()
    )

@dp.message_handler(state=ClientStates.waiting_for_import, content_types=types.ContentType.DOCUMENT)
async def process_file_import(message: types.Message, state: FSMContext):
    if not message.document.file_name.endswith('.csv'):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(message.document.file_id)
        file_path = file.file_path
        downloaded_file = await bot.download_file(file_path)
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings = ['utf-8', 'cp1251', 'windows-1251']
        csv_data = None
        
        for encoding in encodings:
            try:
                csv_data = downloaded_file.read().decode(encoding)
                break
            except UnicodeDecodeError:
                downloaded_file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
                continue
        
        if csv_data is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8 –∏–ª–∏ Windows-1251")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç BOM –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        csv_data = csv_data.strip().replace('\ufeff', '')
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        csv_reader = csv.DictReader(io.StringIO(csv_data))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['–ò–º—è', '–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã', '–°—Ç–∞—Ç—É—Å']
        if not csv_reader.fieldnames:
            raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        normalized_fieldnames = {name.strip().lower(): name for name in csv_reader.fieldnames}
        normalized_required = {name.strip().lower(): name for name in required_columns}
        
        missing_columns = []
        for req_col in normalized_required:
            if req_col not in normalized_fieldnames:
                missing_columns.append(normalized_required[req_col])
        
        if missing_columns:
            raise ValueError(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}")
        
        conn = get_db_connection()
        cursor = conn.cursor()
        
        imported = 0
        errors = 0
        error_details = []
        
        for row in csv_reader:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö –∫–æ–ª–æ–Ω–æ–∫
                name = row['–ò–º—è'].strip()
                if not name:
                    raise ValueError("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                
                try:
                    day = int(row['–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã'].strip())
                except (ValueError, KeyError):
                    raise ValueError("–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                
                status = row['–°—Ç–∞—Ç—É—Å'].strip().lower()
                
                if status not in ('paid', 'unpaid'):
                    raise ValueError("–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'paid' –∏–ª–∏ 'unpaid'")
                
                if not (1 <= day <= 31):
                    raise ValueError("–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31")
                
                cursor.execute(
                    "INSERT OR REPLACE INTO clients (name, payment_day, status) VALUES (?, ?, ?)",
                    (name, day, status)
                )
                imported += 1
            except Exception as e:
                errors += 1
                error_details.append(f"–°—Ç—Ä–æ–∫–∞ {csv_reader.line_num}: {str(e)}")
                continue
        
        conn.commit()
        conn.close()
        
        response = f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported}\n‚ùå –û—à–∏–±–æ–∫: {errors}"
        if error_details:
            response += "\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:\n" + "\n".join(error_details[:5])
            if len(error_details) > 5:
                response += f"\n... –∏ –µ—â–µ {len(error_details) - 5} –æ—à–∏–±–æ–∫"
        
        await message.reply(
            response,
            reply_markup=create_main_keyboard()
        )
    except Exception as e:
        await message.reply(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=create_main_keyboard()
        )
    finally:
        await state.finish()

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(lambda message: message.text == "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data(message: types.Message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT name, payment_day, status FROM clients")
    clients = cursor.fetchall()
    conn.close()
    
    if not clients:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    csv_data = "–ò–º—è,–î–µ–Ω—å –æ–ø–ª–∞—Ç—ã,–°—Ç–∞—Ç—É—Å\n"
    for name, day, status in clients:
        csv_data += f"{name},{day},{status}\n"
    
    with open('clients_export.csv', 'w', encoding='utf-8') as f:
        f.write(csv_data)
    
    with open('clients_export.csv', 'rb') as f:
        await message.reply_document(f, caption="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ë–î)
async def check_payments():
    while True:
        try:
            now = datetime.now()
            current_hour = now.hour
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (10:00, 18:00 –∏–ª–∏ 22:00 –ú–°–ö)
            if current_hour in [10, 18, 22]:
                conn = get_db_connection()
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø–ª–∞—Ç–æ–π —Å–µ–≥–æ–¥–Ω—è
                cursor.execute("""
                    SELECT name, payment_day, status, telegram_username, chat_id 
                    FROM clients 
                    WHERE payment_day = ? AND status = 'unpaid'
                """, (now.day,))
                
                today_clients = cursor.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–ø–ª–∞—Ç–æ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è
                next_3_days = [(now.day + i) % 31 or 31 for i in range(1, 4)]
                cursor.execute("""
                    SELECT name, payment_day, status, telegram_username, chat_id 
                    FROM clients 
                    WHERE payment_day IN ({}) AND status = 'unpaid'
                """.format(','.join('?' * len(next_3_days))), next_3_days)
                
                upcoming_clients = cursor.fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                for admin_id in ADMIN_IDS:
                    if today_clients:
                        today_message = "‚ùó –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                        for name, day, status, telegram, chat_id in today_clients:
                            telegram_info = f" (@{telegram})" if telegram else " (Telegram –Ω–µ —É–∫–∞–∑–∞–Ω)"
                            today_message += f"üë§ {name}{telegram_info}\n"
                        await bot.send_message(admin_id, today_message)
                    
                    if upcoming_clients:
                        upcoming_message = "üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è:\n\n"
                        for name, day, status, telegram, chat_id in upcoming_clients:
                            telegram_info = f" (@{telegram})" if telegram else " (Telegram –Ω–µ —É–∫–∞–∑–∞–Ω)"
                            upcoming_message += f"üë§ {name} - {day} —á–∏—Å–ª–æ{telegram_info}\n"
                        await bot.send_message(admin_id, upcoming_message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º
                for name, day, status, telegram, chat_id in today_clients:
                    if telegram or chat_id:
                        try:
                            notification_text = (
                                f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ\n\n"
                                f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {name},\n"
                                f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å VPN.\n"
                                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                            )
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                            if chat_id:
                                await bot.send_message(chat_id=chat_id, text=notification_text)
                            elif telegram:
                                user = await bot.get_chat(f"@{telegram}")
                                if user and user.id:
                                    await bot.send_message(chat_id=user.id, text=notification_text)
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                    cursor.execute(
                                        "UPDATE clients SET chat_id = ?, last_notified = ? WHERE name = ?",
                                        (user.id, now.strftime("%Y-%m-%d %H:%M:%S"), name)
                                    )
                                    conn.commit()
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {name}: {str(e)}")
                
                conn.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
            await asyncio.sleep(3600)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
            await asyncio.sleep(3600)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

@dp.callback_query_handler(lambda c: c.data.startswith('test_notify_'))
async def process_test_notification(callback_query: types.CallbackQuery):
    client_name = callback_query.data[12:]
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT telegram_username FROM clients WHERE name = ?", (client_name,))
    result = cursor.fetchone()
    conn.close()
    
    if result and result[0]:
        try:
            await bot.send_message(
                callback_query.from_user.id,
                f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client_name} (@{result[0]})"
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
        except Exception as e:
            await bot.send_message(
                callback_query.from_user.id,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: {str(e)}"
            )
    else:
        await bot.answer_callback_query(
            callback_query.id,
            f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {client_name} –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username"
        )

@dp.callback_query_handler(lambda c: c.data.startswith('set_telegram_'))
async def process_set_telegram(callback_query: types.CallbackQuery):
    client_name = callback_query.data[13:]
    await ClientStates.waiting_for_telegram_username.set()
    state = dp.current_state(user=callback_query.from_user.id)
    await state.update_data(client_name=client_name)
    
    await bot.send_message(
        callback_query.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ Telegram username –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_name} (–±–µ–∑ @):"
    )

@dp.message_handler(state=ClientStates.waiting_for_telegram_username)
async def process_telegram_username(message: types.Message, state: FSMContext):
    username = message.text.strip().replace('@', '')
    async with state.proxy() as data:
        client_name = data['client_name']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE clients SET telegram_username = ? WHERE name = ?",
        (username, client_name)
    )
    conn.commit()
    conn.close()
    
    await message.reply(
        f"Telegram username –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @{username}",
        reply_markup=create_main_keyboard()
    )
    await state.finish()

@dp.message_handler(lambda message: message.text == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_menu(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data="check_today"),
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è", callback_data="check_next_3_days"),
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="send_notifications")
    )
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_today")
async def check_today_payments(callback_query: types.CallbackQuery):
    today = datetime.now().day
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT name, payment_day, status, telegram_username 
        FROM clients 
        WHERE payment_day = ? AND status = 'unpaid'
    """, (today,))
    
    unpaid_clients = cursor.fetchall()
    conn.close()
    
    if not unpaid_clients:
        await bot.answer_callback_query(callback_query.id, "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
        return
    
    response = "‚ùó –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    for name, day, status, telegram in unpaid_clients:
        telegram_info = f" (@{telegram})" if telegram else " (Telegram –Ω–µ —É–∫–∞–∑–∞–Ω)"
        response += f"üë§ {name}{telegram_info}\n"
    
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=response,
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="send_notifications"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_notifications")
            )
        )
    except MessageNotModified:
        await bot.answer_callback_query(callback_query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞")

@dp.callback_query_handler(lambda c: c.data == "check_next_3_days")
async def check_next_3_days(callback_query: types.CallbackQuery):
    today = datetime.now().day
    next_3_days = [(today + i) % 31 or 31 for i in range(3)]
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    response = "üìÖ –ü–ª–∞—Ç–µ–∂–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è:\n\n"
    
    for day in next_3_days:
        cursor.execute("""
            SELECT name, payment_day, status, telegram_username 
            FROM clients 
            WHERE payment_day = ? AND status = 'unpaid'
        """, (day,))
        
        unpaid_clients = cursor.fetchall()
        
        if unpaid_clients:
            response += f"üìå {day} —á–∏—Å–ª–æ:\n"
            for name, day, status, telegram in unpaid_clients:
                telegram_info = f" (@{telegram})" if telegram else " (Telegram –Ω–µ —É–∫–∞–∑–∞–Ω)"
                response += f"üë§ {name}{telegram_info}\n"
            response += "\n"
    
    conn.close()
    
    if response == "üìÖ –ü–ª–∞—Ç–µ–∂–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è:\n\n":
        await bot.answer_callback_query(callback_query.id, "–ù–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è")
        return
    
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=response,
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="send_notifications"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_notifications")
            )
        )
    except MessageNotModified:
        await bot.answer_callback_query(callback_query.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞")

@dp.callback_query_handler(lambda c: c.data == "send_notifications")
async def send_notifications(callback_query: types.CallbackQuery):
    today = datetime.now().day
    next_3_days = [(today + i) % 31 or 31 for i in range(3)]
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    sent_count = 0
    failed_count = 0
    
    for day in next_3_days:
        cursor.execute("""
            SELECT name, payment_day, status, telegram_username 
            FROM clients 
            WHERE payment_day = ? AND status = 'unpaid' AND telegram_username IS NOT NULL
        """, (day,))
        
        unpaid_clients = cursor.fetchall()
        
        for name, day, status, telegram in unpaid_clients:
            try:
                notification_text = (
                    f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ\n\n"
                    f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {name},\n"
                    f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å VPN.\n"
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                )
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
                # await bot.send_message(chat_id=telegram, text=notification_text)
                
                cursor.execute(
                    "UPDATE clients SET last_notified = ? WHERE name = ?",
                    (datetime.now().strftime("%Y-%m-%d %H:%M:%S"), name)
                )
                sent_count += 1
            except Exception as e:
                failed_count += 1
                continue
    
    conn.commit()
    conn.close()
    
    response = f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
    response += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
    response += f"‚ùå –û—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {failed_count}"
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response,
        reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_notifications")
        )
    )

@dp.callback_query_handler(lambda c: c.data == "back_to_notifications")
async def back_to_notifications(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data="check_today"),
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è", callback_data="check_next_3_days"),
        types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="send_notifications")
    )
    
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except MessageNotModified:
        await bot.answer_callback_query(callback_query.id, "–ú–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ")

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
async def check_database(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", callback_data="check_db_integrity"),
        types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="create_db_backup"),
        types.InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", callback_data="restore_db_backup")
    )
    
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "check_db_integrity")
async def process_check_db_integrity(callback_query: types.CallbackQuery):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        if not tables:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã",
                reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                    types.InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", callback_data="restore_db_backup"),
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
                )
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        cursor.execute("PRAGMA integrity_check")
        integrity_check = cursor.fetchone()[0]
        
        if integrity_check != "ok":
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞: {integrity_check}",
                reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                    types.InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", callback_data="restore_db_backup"),
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
                )
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM clients")
        clients_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM payment_history")
        payments_count = cursor.fetchone()[0]
        
        conn.close()
        
        response = "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ:\n\n"
        response += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}\n"
        response += f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {payments_count}\n"
        response += f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {integrity_check}"
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=response,
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="create_db_backup"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )
    except Exception as e:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}",
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É", callback_data="restore_db_backup"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "create_db_backup")
async def process_create_db_backup(callback_query: types.CallbackQuery):
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backups')
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        backup_filename = f"vpn_bot_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
        backup_path = os.path.join(backup_dir, backup_filename)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vpn_bot.db')
        shutil.copy2(db_path, backup_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
        backups = sorted([f for f in os.listdir(backup_dir) if f.endswith('.db')], reverse=True)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        if len(backups) > 5:
            for old_backup in backups[5:]:
                os.remove(os.path.join(backup_dir, old_backup))
        
        response = "‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        response += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:\n"
        for backup in backups[:5]:
            response += f"üìÅ {backup}\n"
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=response,
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )
    except Exception as e:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}",
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "restore_db_backup")
async def process_restore_db_backup(callback_query: types.CallbackQuery):
    try:
        backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backups')
        if not os.path.exists(backup_dir):
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
                )
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        backups = []
        for f in os.listdir(backup_dir):
            if f.endswith('.db') and os.path.isfile(os.path.join(backup_dir, f)):
                backups.append(f)
        
        backups = sorted(backups, reverse=True)
        
        if not backups:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π",
                reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                    types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
                )
            )
            return
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for backup in backups[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫–æ–ø–∏–π
            keyboard.add(types.InlineKeyboardButton(
                f"üìÅ {backup}",
                callback_data=f"restore_backup_{backup}"
            ))
        keyboard.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu"))
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ø–∏–π: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=error_message,
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data.startswith('restore_backup_'))
async def process_restore_selected_backup(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ callback_data, —É–±–∏—Ä–∞—è –ø—Ä–µ—Ñ–∏–∫—Å –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        backup_filename = callback_query.data[14:].strip('_')
        backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backups')
        backup_path = os.path.join(backup_dir, backup_filename)
        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vpn_bot.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª–∞
        if not os.path.exists(backup_dir):
            raise FileNotFoundError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if not os.path.exists(backup_path):
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
            alt_backup_path = os.path.join(backup_dir, backup_filename.lstrip('_'))
            if os.path.exists(alt_backup_path):
                backup_path = alt_backup_path
            else:
                raise FileNotFoundError(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è {backup_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
        pre_restore_backup = os.path.join(os.path.dirname(os.path.abspath(__file__)), 
                                        f'vpn_bot_pre_restore_{current_time}.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if os.path.exists(db_path):
            shutil.copy2(db_path, pre_restore_backup)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–ø–∏—é
        shutil.copy2(backup_path, db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        if not os.path.exists(db_path):
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫–æ–ø–∏–∏ {backup_filename}",
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", callback_data="check_db_integrity"),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )
    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        print(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text=error_message,
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_db_menu")
            )
        )

@dp.callback_query_handler(lambda c: c.data == "back_to_db_menu")
async def back_to_db_menu(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", callback_data="check_db_integrity"),
        types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", callback_data="create_db_backup"),
        types.InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏", callback_data="restore_db_backup")
    )
    
    try:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    except MessageNotModified:
        await bot.answer_callback_query(callback_query.id, "–ú–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ")

if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    loop.create_task(check_payments())
    executor.start_polling(dp, skip_updates=True)